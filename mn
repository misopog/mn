#!/bin/bash
# mn - a dead simple note-taking script
# misopog 2024

# Configuration file
CONFIG_FILE="$HOME/.config/mn/mnrc"
LOGGING_FILE="$HOME/.cache/mn.log"

    if [[ -e $LOGGING_FILE ]]; then
        printf "\n" >> $LOGGING_FILE
    else
        touch $LOGGING_FILE
    fi

# Logging
log_message() {

    if [ $1 == err ]; then
        printf "[ERROR]: $2\n"
        echo "[ERROR]: $2" >> $LOGGING_FILE
    elif [ $1 == warn ]; then
        printf "[WARNING]: $2\n"
        echo "[WARNING]: $2" >> $LOGGING_FILE
    elif [ $1 == log ]; then
        printf "$2\n"
        echo "[LOG]: $2" >> $LOGGING_FILE
    fi
}


# Function to check if a command is available
command_exists() {
    command -v "$1" > /dev/null 2>&1
}

# Function to get the list of notes
get_note_list() {
    find "$NOTES_FOLDER" -type f -name "*.md" -exec basename {} \;
}

# Function to create a new note
create_note() {
    if [ $# -eq 1 ]; then
        note_name="$1"
        category=""
    elif [ $# -eq 2 ]; then
        note_name="$2"
        category="$1"
    else
        # If no arguments, prompt the user for input
        echo -n "Enter the name of the note: "
        read -r note_name

        echo -n "Enter the category (leave blank for root): "
        read -r category
    fi

    if [ -z "$note_name" ]; then
        log_message err "Note name cannot be empty."
        return
    fi

    if [ -z "$category" ]; then
        note_path="$NOTES_FOLDER/$note_name.$NOTE_EXTENSION"
        touch "$note_path" || { log_message err "Unable to create note file."; return; }
    else
        note_path="$NOTES_FOLDER/$category/$note_name.$NOTE_EXTENSION"
        if [ ! -d "$NOTES_FOLDER/$category" ]; then
            log_message warn "Category folder does not exist. Creating..."
            mkdir -p "$NOTES_FOLDER/$category" || { log_message err "Unable to create category folder."; return; }
        else
            log_message warn "Category folder already exists."
        fi
    fi

    log_message log "Note created"
    if command_exists "$EDITOR_NAME"; then
        "$EDITOR_NAME" "$note_path"
    else
        log_message err "Editor '$EDITOR_NAME' not found."
    fi
}

# Function to edit an existing note
edit_note() {
    if [ $# -eq 1 ]; then
        note_name="$1"
        note_path="$NOTES_FOLDER/$note_name.$NOTE_EXTENSION"
    else
        PS3="Select a note to edit: "
        options=($(get_note_list))
        select note_name in "${options[@]}"; do
            if [ -z "$note_name" ]; then
                echo "[ERROR]: Invalid option"
                return
            fi
            note_path="$NOTES_FOLDER/$note_name"
            break
        done
    fi

    if [ -f "$note_path" ]; then
        if command_exists "$EDITOR_NAME"; then
            "$EDITOR_NAME" "$note_path" || { log_message err "Unable to open note file."; return; }
            log_message log "Note edited: $note_path"
        else
            log_message err "Editor '$EDITOR_NAME' not found."
        fi
    else
        log_message err "Note '$note_name' not found."
    fi
}

# Function to remove an existing note
remove_note() {
    if [ $# -eq 1 ]; then
        note_name="$1"
        note_path="$NOTES_FOLDER/$note_name.$NOTE_EXTENSION"
    else
        PS3="Select a note to remove: "
        options=($(get_note_list))
        select note_name in "${options[@]}"; do
            if [ -z "$note_name" ]; then
                echo "[ERROR]: Invalid option"
                return
            fi
            note_path="$NOTES_FOLDER/$note_name.$NOTE_EXTENSION"
            break
        done
    fi

    # Confirm deletion
        read -p "Are you sure you want to remove $note_name? (y/n): " confirm
        if [ "$confirm" != "y" ]; then
            log_message log "Removal canceled."
            return
        fi

    if [ -f "$note_path" ]; then
        rm "$note_path"
        log_message log "Note removed: $note_path"

        # Check if the category should be removed
        category=$(dirname "$note_path")
        if [ "$REMOVE_CATEGORY_OPTION" = true ] && [ -z "$(ls -A "$category")" ]; then
            rmdir "$category"
            log_message log "Category removed: $category"
        fi
    else
        log_message err "Note '$note_name' not found."
    fi
}

# Check if configuration file exists, create if not
if [ ! -f "$CONFIG_FILE" ]; then
    mkdir -p "$(dirname "$CONFIG_FILE")"
    echo "Please configure mn before first use."

    # Prompt for notes folder
    while true; do
        echo -n "Enter the path to your notes folder: "
        read -r NOTES_FOLDER

        # Use eval to interpret ~ as the home directory
        eval NOTES_FOLDER="$NOTES_FOLDER"

        # Ensure the folder exists or create it
        if [ ! -d "$NOTES_FOLDER" ]; then
            log_message log "Notes folder does not exist. Creating..."
            mkdir -p "$NOTES_FOLDER"
            break
        else
            echo "Notes folder already exists."
            break
        fi
    done

    # Prompt for editor
    echo -n "Enter your preferred editor: "
    read -r EDITOR_NAME

    # Save configuration with NOTES_FOLDER and EDITOR_NAME
    echo "NOTES_FOLDER=\"$NOTES_FOLDER\"" > "$CONFIG_FILE"
    echo "EDITOR_NAME=\"$EDITOR_NAME\"" >> "$CONFIG_FILE"
    echo "REMOVE_CATEGORY_OPTION="false"" >> "$CONFIG_FILE"
    echo "NOTE_EXTENSION="md"" >> "$CONFIG_FILE"
    echo "Configuration saved in $CONFIG_FILE"
   
    log_message log "Configuration wizard completed with the notes folder $NOTES_FOLDER and the selected editor $EDITOR_NAME"
    exit 0
fi

# Load configuration
source "$CONFIG_FILE"

# Handle command-line arguments
if [ $# -ge 1 ]; then
    case $1 in
        new)
            create_note "${@:2}"
            ;;
        edit)
            edit_note "${@:2}"
            ;;
        rm)
            remove_note "${@:2}"
            ;;
        *)
            echo "Invalid command. Usage: mn [new|edit|rm] [options]"
            ;;
    esac
else
    # If no command-line arguments, display the menu
    display_menu
fi
